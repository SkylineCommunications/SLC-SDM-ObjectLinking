//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Editor automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcObject_Linking
{
	using System;
	using System.ComponentModel;

	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Sections;

	public static class SlcObject_LinkingIds
	{
		public const string ModuleId = "(slc)object_linking";
		public static class Enums
		{
			public enum Temp
			{
				One = 0
			}
		}

		public static class Sections
		{
			public static class Entity
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("75dd33f0-204e-4b51-bec3-3ae57065ebc0"))
				{ ModuleId = "(slc)object_linking" };
				public static FieldDescriptorID ID { get; } = new FieldDescriptorID(new Guid("448ee862-c27e-4a59-8177-0a729066ed00"));
				public static FieldDescriptorID DisplayName { get; } = new FieldDescriptorID(new Guid("1e090b71-79a7-4139-b0b0-4bf54121e5fe"));
				public static FieldDescriptorID ModelName { get; } = new FieldDescriptorID(new Guid("b5c01401-f9aa-4a70-9dc8-6ea074f7ea32"));
				public static FieldDescriptorID SolutionName { get; } = new FieldDescriptorID(new Guid("770cb9d9-7794-45a7-a551-9f1362a7aacc"));
				public static FieldDescriptorID ParentID { get; } = new FieldDescriptorID(new Guid("a2e6974c-226a-4b78-9f74-1980d9957eb7"));
				public static FieldDescriptorID ParentModelName { get; } = new FieldDescriptorID(new Guid("a6652fa8-378a-4746-a490-fa7d8262abe3"));
				public static FieldDescriptorID Temp { get; } = new FieldDescriptorID(new Guid("9fcff460-573a-458d-bb84-2eeb904fdcf8"));
			}
		}

		public static class Definitions
		{
			public static DomDefinitionId Link { get; } = new DomDefinitionId(new Guid("f0c5a841-498a-4c3c-a4e0-c3c4c162d206"))
			{ ModuleId = "(slc)object_linking" };
		}

		public static class Behaviors
		{
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers
{
	using System;
	using System.Linq;

	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.ManagerStore;
	using Skyline.DataMiner.Net.Messages;
	using Skyline.DataMiner.Net.Sections;
	using Skyline.DataMiner.SDM;

	/// <summary>
	/// Serves as the abstract base class for wrapper classes that provide access to DOM instances.
	/// The <see cref="DomInstanceBase{T}"/> class defines the common functionality and structure for interacting with DOM objects stored in the database, serving as a foundation for derived classes that wrap specific DOM instances.
	/// </summary>
	public abstract class DomInstanceBase<T> : SdmObject<T>, IEquatable<DomInstanceBase<T>> where T : SdmObject<T>
	{
		protected DomInstanceBase(DomDefinitionId definitionId)
		{
			if (definitionId == null)
				throw new ArgumentNullException(nameof(definitionId));
			domInstance = new DomInstance { DomDefinitionId = definitionId };
			Guid = domInstance.ID.Id;
		}

		protected DomInstanceBase(DomDefinitionId definitionId, Guid id)
		{
			if (definitionId == null)
				throw new ArgumentNullException(nameof(definitionId));
			if (id == Guid.Empty)
				throw new ArgumentException("The id cannot be an empty guid", nameof(id));
			domInstance = new DomInstance
			{
				ID = new DomInstanceId(id)
				{ ModuleId = definitionId.ModuleId },
				DomDefinitionId = definitionId
			};
			Guid = domInstance.ID.Id;
		}

		protected DomInstanceBase(DomInstance domInstance)
		{
			if (domInstance == null)
				throw new ArgumentNullException(nameof(domInstance));
			this.domInstance = domInstance;
			Guid = domInstance.ID.Id;
		}

		/// <summary>
		/// Gets the Module ID of the DOM Instance.
		/// </summary>
		public String ModuleId
		{
			get
			{
				return domInstance.DomDefinitionId.ModuleId;
			}
		}

		/// <summary>
		/// Gets the ID of the DOM Instance.
		/// </summary>
		public DomInstanceId ID
		{
			get
			{
				return domInstance.ID;
			}
		}

		/// <summary>
		/// Gets the name of the DOM Instance.
		/// </summary>
		public String Name
		{
			get
			{
				return domInstance.Name;
			}
		}

		/// <summary>
		/// Gets the Status ID of the DOM Instance.
		/// </summary>
		public String StatusId
		{
			get
			{
				return domInstance.StatusId;
			}
		}

		/// <summary>
		/// Gets the underlying DOM Instance.
		/// </summary>
		public DomDefinitionId DomDefinitionId
		{
			get
			{
				return domInstance.DomDefinitionId;
			}
		}

		protected DomInstance domInstance { get; set; }

		/// <summary>
		/// Gets the datetime when the DOM Instance was created in UTC.
		/// </summary>
		public DateTime? CreatedAt
		{
			get
			{
				var createdAt = ((ITrackCreatedAt)domInstance).CreatedAt;
				if (createdAt == null)
					return null;
				else
					return createdAt.ToUniversalTime();
			}
		}

		/// <summary>
		/// Gets the user that created the DOM Instance.
		/// </summary>
		public string CreatedBy
		{
			get
			{
				return ((ITrackCreatedBy)domInstance).CreatedBy;
			}
		}

		/// <summary>
		/// Gets the datetime when the DOM Instance was last modified in UTC.
		/// </summary>
		public DateTime? LastModified
		{
			get
			{
				var lastModified = ((ITrackLastModified)domInstance).LastModified;
				if (lastModified == null)
					return null;
				else
					return lastModified.ToUniversalTime();
			}
		}

		/// <summary>
		/// Gets the user that last modified the DOM Instance.
		/// </summary>
		public string LastModifiedBy
		{
			get
			{
				return ((ITrackLastModifiedBy)domInstance).LastModifiedBy;
			}
		}

		public static implicit operator DomInstanceId(DomInstanceBase<T> instance)
		{
			return instance.ID;
		}

		public static implicit operator DomInstance(DomInstanceBase<T> instance)
		{
			return instance.ToInstance();
		}

		public static bool operator ==(DomInstanceBase<T> left, DomInstanceBase<T> right)
		{
			if (left is null)
			{
				return right is null;
			}

			return left.Equals(right);
		}

		public static bool operator !=(DomInstanceBase<T> left, DomInstanceBase<T> right)
		{
			return !(left == right);
		}

		/// <summary>
		/// Deletes this DOM Instance from the database.
		/// </summary>
		/// <param name="messageHandler">The connection to the DataMiner system.</param>
		public void Delete(Func<DMSMessage[], DMSMessage[]> messageHandler)
		{
			Delete(new DomHelper(messageHandler, ModuleId));
		}

		/// <summary>
		/// Deletes this DOM Instance from the database.
		/// </summary>
		/// <param name="helper">The connection to the DataMiner system.</param>
		public void Delete(DomHelper helper)
		{
			helper.DomInstances.Delete(domInstance);
		}

		/// <summary>
		/// Saves this DOM Instance to the database.
		/// </summary>
		/// <param name="messageHandler">The connection to the DataMiner system.</param>
		public void Save(Func<DMSMessage[], DMSMessage[]> messageHandler)
		{
			Save(new DomHelper(messageHandler, ModuleId));
		}

		/// <summary>
		/// Saves this DOM Instance to the database.
		/// </summary>
		/// <param name="helper">The connection to the DataMiner system.</param>
		public abstract void Save(DomHelper helper);
		/// <summary>
		/// Return the DOM Instance object with all the fields filled in according to this object.
		/// </summary>
		public DomInstance ToInstance()
		{
			BeforeToInstance();
			var instance = InternalToInstance();
			AfterToInstance();
			return instance;
		}

		/// <summary>
		/// Optional method that runs before the internal ToInstance method runs.
		/// </summary>
		protected virtual void BeforeToInstance()
		{
		}

		/// <summary>
		/// Return the DOM Instance object with all the fields filled in according to this object.
		/// </summary>
		protected abstract DomInstance InternalToInstance();
		/// <summary>
		/// Optional method that runs after the internal ToInstance method runs.
		/// </summary>
		protected virtual void AfterToInstance()
		{
		}

		protected abstract void InitializeProperties();
		/// <summary>
		/// Optional method that runs after the object is constructed and the initialize has ran.
		/// </summary>
		protected virtual void AfterLoad()
		{
		}

		public override int GetHashCode()
		{
			return this.ID.GetHashCode();
		}

		public override bool Equals(object obj)
		{
			return Equals(obj as DomInstanceBase<T>);
		}

		public bool Equals(DomInstanceBase<T> other)
		{
			if (other is null)
			{
				return false;
			}

			if (ReferenceEquals(this, other))
			{
				return true;
			}

			return this.ID.Equals(other.ID);
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers
{
	using System;
	using System.Linq;

	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Sections;

	public abstract class DomSectionBase : IEquatable<DomSectionBase>
	{
		protected Section section;
		protected DomSectionBase(SectionDefinitionID id)
		{
			if (id == null)
				throw new ArgumentNullException(nameof(id));
			this.section = new Section(id);
			AfterLoad();
		}

		protected DomSectionBase(SectionDefinition definition)
		{
			if (definition == null)
				throw new ArgumentNullException(nameof(definition));
			this.section = new Section(definition);
			AfterLoad();
		}

		protected DomSectionBase(Section section, SectionDefinitionID id)
		{
			if (section == null)
				throw new ArgumentNullException(nameof(section));
			if (section.SectionDefinitionID == null)
			{
				throw new ArgumentException("The given section doesn't have a valid SectionDefinitionId.", nameof(section));
			}

			if (!section.SectionDefinitionID.Equals(id))
			{
				throw new ArgumentException($"The given section, is not of type '{nameof(id)}'", nameof(section));
			}

			this.section = section;
			AfterLoad();
		}

		/// <summary>
		/// Gets the section's ID.
		/// </summary>
		public SectionID SectionID
		{
			get
			{
				return section.ID;
			}
		}

		/// <summary>
		/// Gets the section's Section Definition ID.
		/// </summary>
		public SectionDefinitionID SectionDefinitionID
		{
			get
			{
				return section.SectionDefinitionID;
			}
		}

		/// <summary>
		/// Gets a value indicating whether the section is empty.
		/// </summary>
		/// <value>
		/// <see langword="true"/> if the section doesn't contains any field values, otherwise, <see langword="false"/>.
		/// </value>
		public bool IsEmpty
		{
			get
			{
				return !section.FieldValues.Any();
			}
		}

		public static implicit operator SectionDefinitionID(DomSectionBase sectionBase)
		{
			return sectionBase.section.SectionDefinitionID;
		}

		public static implicit operator SectionDefinition(DomSectionBase sectionBase)
		{
			return sectionBase.section.GetSectionDefinition();
		}

		public static bool operator ==(DomSectionBase left, DomSectionBase right)
		{
			if (left is null)
			{
				return right is null;
			}

			return left.Equals(right);
		}

		public static bool operator !=(DomSectionBase left, DomSectionBase right)
		{
			return !(left == right);
		}

		public override string ToString()
		{
			return $"{this.section.SectionDefinitionID}";
		}

		/// <summary>
		/// Optional method that runs at the end of the constructor.
		/// </summary>
		protected virtual void AfterLoad()
		{
		}

		public virtual Section ToSection()
		{
			BeforeToSection();
			var section = InternalToSection();
			AfterToSection();
			return section;
		}

		/// <summary>
		/// Optional method that runs before the internal ToSection method runs.
		/// </summary>
		protected virtual void BeforeToSection()
		{
		}

		protected virtual Section InternalToSection()
		{
			return this.section;
		}

		/// <summary>
		/// Optional method that runs after the internal ToSection method runs.
		/// </summary>
		protected virtual void AfterToSection()
		{
		}

		public override int GetHashCode()
		{
			return this.SectionID.GetHashCode();
		}

		public override bool Equals(object obj)
		{
			return Equals(obj as DomSectionBase);
		}

		public bool Equals(DomSectionBase other)
		{
			if (other is null)
			{
				return false;
			}

			if (ReferenceEquals(this, other))
			{
				return true;
			}

			return this.SectionID.Equals(other.SectionID);
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Skyline.DataMiner.SDM.ObjectLinking
{
	using System;
	using System.Collections.Generic;
	using System.Linq;

	using DomHelpers;
	using DomHelpers.SlcObject_Linking;

	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Messages;

	/// <summary>
	/// Represents a wrapper class for accessing a Link DOM instance.
	/// The <see cref="Link"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class Link : DomInstanceBase<Link>
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="Link"/> class. Creates an empty <see cref="Link"/> instance with default settings.
		/// </summary>
		public Link() : base(SlcObject_LinkingIds.Definitions.Link)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="Link"/> class. Creates an empty <see cref="Link"/> instance with default settings and a specific ID.
		/// </summary>
		public Link(Guid id) : base(SlcObject_LinkingIds.Definitions.Link, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="Link"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="Link"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public Link(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SlcObject_LinkingIds.Definitions.Link))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcObject_LinkingIds.Definitions.Link)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets or sets the Entity section of the DOM Instance.
		/// </summary>
		public IList<Entity> Entities { get; private set; }

		public static explicit operator Link(DomInstance instance)
		{
			return new Link(instance);
		}

		/// <summary>
		/// Creates a deep copy of the current <see cref="Link"/>.
		/// </summary>
		/// <returns>A new <see cref="Link"/> object that is a deep copy of this instance.</returns>
		public Link Clone()
		{
			return new Link((DomInstance)this.ToInstance().Clone());
		}

		/// <summary>
		/// Creates a duplicate of the current <see cref="Link"/> with a new id.
		/// </summary>
		/// <returns>A new <see cref="Link"/> object that is a copy of this instance but with a different id.</returns>
		public Link Duplicate()
		{
			var instance = (DomInstance)this.ToInstance().Clone();
			instance.ID = new DomInstanceId(Guid.NewGuid())
			{ ModuleId = ModuleId };
			foreach (var section in instance.Sections)
			{
				section.ID = new Skyline.DataMiner.Net.Sections.SectionID(Guid.NewGuid());
			}

			return new Link(instance);
		}

		/// <inheritdoc />
		protected sealed override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			foreach (var item in Entities)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			return domInstance;
		}

		/// <inheritdoc />
		public sealed override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected sealed override void InitializeProperties()
		{
			Entities = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcObject_LinkingIds.Sections.Entity.Id)).Select(section => new Entity(section)).ToList();
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Skyline.DataMiner.SDM.ObjectLinking
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;

	using DomHelpers;
	using DomHelpers.SlcObject_Linking;

	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Apps.Sections.Sections;
	using Skyline.DataMiner.Net.Messages;
	using Skyline.DataMiner.Net.Sections;

	/// <summary>
	/// Represents a wrapper class for accessing a Entity section.
	/// The <see cref="Entity"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class Entity : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="Entity"/> class. Creates an empty <see cref="Entity"/> object with default settings.
		/// </summary>
		public Entity() : base(SlcObject_LinkingIds.Sections.Entity.Id)
		{
			Temp = new List<SlcObject_LinkingIds.Enums.Temp>();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="Entity"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="Entity"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public Entity(Section section) : base(section, SlcObject_LinkingIds.Sections.Entity.Id)
		{
			var temp = section.GetListValue<Int32>(SlcObject_LinkingIds.Sections.Entity.Temp);
			Temp = temp != null ? temp.Values.Cast<SlcObject_LinkingIds.Enums.Temp>().ToList() : new List<SlcObject_LinkingIds.Enums.Temp>();
		}

		/// <summary>
		/// Gets or sets the ID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcObject_LinkingIds.Sections.Entity.ID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcObject_LinkingIds.Sections.Entity.ID);
				}
				else
				{
					section.AddOrUpdateValue(SlcObject_LinkingIds.Sections.Entity.ID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the DisplayName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String DisplayName
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcObject_LinkingIds.Sections.Entity.DisplayName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcObject_LinkingIds.Sections.Entity.DisplayName);
				}
				else
				{
					section.AddOrUpdateValue(SlcObject_LinkingIds.Sections.Entity.DisplayName, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ModelName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ModelName
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcObject_LinkingIds.Sections.Entity.ModelName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcObject_LinkingIds.Sections.Entity.ModelName);
				}
				else
				{
					section.AddOrUpdateValue(SlcObject_LinkingIds.Sections.Entity.ModelName, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the SolutionName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String SolutionName
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcObject_LinkingIds.Sections.Entity.SolutionName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcObject_LinkingIds.Sections.Entity.SolutionName);
				}
				else
				{
					section.AddOrUpdateValue(SlcObject_LinkingIds.Sections.Entity.SolutionName, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ParentID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ParentID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcObject_LinkingIds.Sections.Entity.ParentID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcObject_LinkingIds.Sections.Entity.ParentID);
				}
				else
				{
					section.AddOrUpdateValue(SlcObject_LinkingIds.Sections.Entity.ParentID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ParentModelName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ParentModelName
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcObject_LinkingIds.Sections.Entity.ParentModelName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcObject_LinkingIds.Sections.Entity.ParentModelName);
				}
				else
				{
					section.AddOrUpdateValue(SlcObject_LinkingIds.Sections.Entity.ParentModelName, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the Temp field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public IList<SlcObject_LinkingIds.Enums.Temp> Temp { get; private set; }

		/// <summary>
		/// Creates a deep copy of the current <see cref="Entity"/>.
		/// </summary>
		/// <returns>A new <see cref="Entity"/> object that is a deep copy of this section.</returns>
		public Entity Clone()
		{
			return new Entity((Section)this.ToSection().Clone());
		}

		/// <summary>
		/// Creates a duplicate of the current <see cref="Entity"/> with a new id.
		/// </summary>
		/// <returns>A new <see cref="Entity"/> object that is a copy of this section but with a different id.</returns>
		public Entity Duplicate()
		{
			var section = (Section)this.ToSection().Clone();
			section.ID = new SectionID(Guid.NewGuid());
			return new Entity(section);
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (Temp.Count == 0)
				section.RemoveFieldValueById(SlcObject_LinkingIds.Sections.Entity.Temp);
			else
				section.AddOrUpdateListValue<Int32>(SlcObject_LinkingIds.Sections.Entity.Temp, Temp.Cast<Int32>().ToList());
			return section;
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Skyline.DataMiner.SDM.ObjectLinking
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Linq;

	using DomHelpers.SlcObject_Linking;

	using Skyline.DataMiner.Net.Messages.SLDataGateway;
	using Skyline.DataMiner.SDM;

	using SLDataGateway.API.Querying;
	using SLDataGateway.API.Types.Querying;

	public static class LinkExposers
	{
		public static readonly Exposer<Link, Guid> Guid = new Exposer<Link, Guid>((obj) => obj.Guid, nameof(Link.Guid));
		public static readonly Exposer<Link, DateTime> CreatedAt = new Exposer<Link, DateTime>((obj) => obj.CreatedAt.GetValueOrDefault(), nameof(Link.CreatedAt));
		public static readonly Exposer<Link, string> CreatedBy = new Exposer<Link, string>((obj) => obj.CreatedBy, nameof(Link.CreatedBy));
		public static readonly Exposer<Link, DateTime> LastModified = new Exposer<Link, DateTime>((obj) => obj.LastModified.GetValueOrDefault(), nameof(Link.LastModified));
		public static readonly Exposer<Link, string> LastModifiedBy = new Exposer<Link, string>((obj) => obj.LastModifiedBy, nameof(Link.LastModifiedBy));

		private static Dictionary<System.Reflection.MemberInfo, FieldExposer> ExposerMap = new Dictionary<System.Reflection.MemberInfo, FieldExposer>(MemberComparer.Instance)
		{
			{typeof(Link).GetProperty(nameof(Link.Guid)), LinkExposers.Guid},
			{typeof(Link).GetProperty(nameof(Link.CreatedAt)), LinkExposers.CreatedAt},
			{typeof(Link).GetProperty(nameof(Link.CreatedBy)), LinkExposers.CreatedBy},
			{typeof(Link).GetProperty(nameof(Link.LastModified)), LinkExposers.LastModified},
			{typeof(Link).GetProperty(nameof(Link.LastModifiedBy)), LinkExposers.LastModifiedBy},
			{typeof(Entity).GetProperty(nameof(Entity.ID)), Entities.ID},
			{typeof(Entity).GetProperty(nameof(Entity.DisplayName)), Entities.DisplayName},
			{typeof(Entity).GetProperty(nameof(Entity.ModelName)), Entities.ModelName},
			{typeof(Entity).GetProperty(nameof(Entity.SolutionName)), Entities.SolutionName},
			{typeof(Entity).GetProperty(nameof(Entity.ParentID)), Entities.ParentID},
			{typeof(Entity).GetProperty(nameof(Entity.ParentModelName)), Entities.ParentModelName},
			{typeof(Entity).GetProperty(nameof(Entity.Temp)), Entities.Temp}
		};
		private static Dictionary<FieldExposer, Func<Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer, object, FilterElement<Link>>> FilterMap = new Dictionary<FieldExposer, Func<Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer, object, FilterElement<Link>>>
		{
			{ LinkExposers.Guid, (comparer, value) => FilterElementFactory.Create(LinkExposers.Guid, comparer, (Guid)value) },
			{ LinkExposers.CreatedAt, (comparer, value) => FilterElementFactory.Create(LinkExposers.CreatedAt, comparer, (DateTime)value) },
			{ LinkExposers.CreatedBy, (comparer, value) => FilterElementFactory.Create(LinkExposers.CreatedBy, comparer, (string)value) },
			{ LinkExposers.LastModified, (comparer, value) => FilterElementFactory.Create(LinkExposers.LastModified, comparer, (DateTime)value) },
			{ LinkExposers.LastModifiedBy, (comparer, value) => FilterElementFactory.Create(LinkExposers.LastModifiedBy, comparer, (string)value) },
			{ Entities.ID, (comparer, value) => FilterElementFactory.Create(Entities.ID, comparer, (string)value) },
			{ Entities.DisplayName, (comparer, value) => FilterElementFactory.Create(Entities.DisplayName, comparer, (string)value) },
			{ Entities.ModelName, (comparer, value) => FilterElementFactory.Create(Entities.ModelName, comparer, (string)value) },
			{ Entities.SolutionName, (comparer, value) => FilterElementFactory.Create(Entities.SolutionName, comparer, (string)value) },
			{ Entities.ParentID, (comparer, value) => FilterElementFactory.Create(Entities.ParentID, comparer, (string)value) },
			{ Entities.ParentModelName, (comparer, value) => FilterElementFactory.Create(Entities.ParentModelName, comparer, (string)value) },
			{ Entities.Temp, (comparer, value) => FilterElementFactory.Create(Entities.Temp, comparer, (SlcObject_LinkingIds.Enums.Temp)value) }
		};

		public static FilterElement<Link> CreateFilter(System.Reflection.MemberInfo member, Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer comparer, object value)
		{
			if (ExposerMap.TryGetValue(member, out var fieldExposer) && FilterMap.TryGetValue(fieldExposer, out var create))
			{
				return create(comparer, value);
			}

			return null;
		}

		public static IOrderByElement CreateOrderBy(System.Reflection.MemberInfo member, SLDataGateway.API.Types.Querying.SortOrder sortOrder, bool naturalSort = false)
		{
			if (ExposerMap.TryGetValue(member, out var fieldExposer))
			{
				return OrderByElement.Default.WithFieldExposer(fieldExposer).WithSortOrder(sortOrder).WithNaturalSort(naturalSort);
			}

			return null;
		}

		public static class Entities
		{
			public static readonly DynamicListExposer<Link, string> ID = DynamicListExposer<Link, string>.CreateFromListExposer(new Exposer<Link, IEnumerable>((obj) => obj.Entities.Select(x => x.ID).Where(x => x != null), String.Join(".", nameof(Entity), nameof(ID))));
			public static readonly DynamicListExposer<Link, string> DisplayName = DynamicListExposer<Link, string>.CreateFromListExposer(new Exposer<Link, IEnumerable>((obj) => obj.Entities.Select(x => x.DisplayName).Where(x => x != null), String.Join(".", nameof(Entity), nameof(DisplayName))));
			public static readonly DynamicListExposer<Link, string> ModelName = DynamicListExposer<Link, string>.CreateFromListExposer(new Exposer<Link, IEnumerable>((obj) => obj.Entities.Select(x => x.ModelName).Where(x => x != null), String.Join(".", nameof(Entity), nameof(ModelName))));
			public static readonly DynamicListExposer<Link, string> SolutionName = DynamicListExposer<Link, string>.CreateFromListExposer(new Exposer<Link, IEnumerable>((obj) => obj.Entities.Select(x => x.SolutionName).Where(x => x != null), String.Join(".", nameof(Entity), nameof(SolutionName))));
			public static readonly DynamicListExposer<Link, string> ParentID = DynamicListExposer<Link, string>.CreateFromListExposer(new Exposer<Link, IEnumerable>((obj) => obj.Entities.Select(x => x.ParentID).Where(x => x != null), String.Join(".", nameof(Entity), nameof(ParentID))));
			public static readonly DynamicListExposer<Link, string> ParentModelName = DynamicListExposer<Link, string>.CreateFromListExposer(new Exposer<Link, IEnumerable>((obj) => obj.Entities.Select(x => x.ParentModelName).Where(x => x != null), String.Join(".", nameof(Entity), nameof(ParentModelName))));
			public static readonly DynamicListExposer<Link, SlcObject_LinkingIds.Enums.Temp> Temp = DynamicListExposer<Link, SlcObject_LinkingIds.Enums.Temp>.CreateFromListExposer(new Exposer<Link, IEnumerable>((obj) => obj.Entities.Select(x => x.Temp).Where(x => x != null), String.Join(".", nameof(Entity), nameof(Temp))));
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Skyline.DataMiner.SDM.ObjectLinking
{
	using System;
	using System.Collections.Generic;
	using System.Linq;

	using DomHelpers.SlcObject_Linking;

	using Skyline.DataMiner.Net;
	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Apps.Sections.Sections;
	using Skyline.DataMiner.Net.Helper;
	using Skyline.DataMiner.Net.ManagerStore;
	using Skyline.DataMiner.Net.Messages;
	using Skyline.DataMiner.Net.Messages.SLDataGateway;
	using Skyline.DataMiner.Net.Sections;
	using Skyline.DataMiner.Net.SubscriptionFilters;
	using Skyline.DataMiner.SDM;

	using SLDataGateway.API.Querying;
	using SLDataGateway.API.Types.Querying;

	internal partial class LinkDomStorageProvider : IObservableBulkStorageProvider<Link>
	{
		private readonly IConnection connection;
		private readonly DomHelper helper;
		private readonly object _lock = new object();
		private int _subscriberCount = 0;
		private string _subscriptionSetId;
		private SubscriptionFilter[] _subscriptionFilters;
		internal LinkDomStorageProvider(IConnection connection)
		{
			this.connection = connection;
			this.helper = new DomHelper(connection.HandleMessages, DomHelpers.SlcObject_Linking.SlcObject_LinkingIds.ModuleId);
			this._subscriptionSetId = $"DomInstanceSubscription_{nameof(LinkDomStorageProvider)}_{Guid.NewGuid()}";
			this._subscriptionFilters = new SubscriptionFilter[] { new ModuleEventSubscriptionFilter<DomInstancesChangedEventMessage>(DomHelpers.SlcObject_Linking.SlcObject_LinkingIds.ModuleId), new SubscriptionFilter<DomInstancesChangedEventMessage, DomInstance>(DomInstanceExposers.DomDefinitionId.Equal(SlcObject_LinkingIds.Definitions.Link.Id)) };
		}

		public event EventHandler<SdmObjectEventArgs<Link>> OnCreated
		{
			add
			{
				lock (_lock)
				{
					CheckAndSubscribe();
					this.Created += value;
				}
			}

			remove
			{
				lock (_lock)
				{
					this.Created -= value;
					CheckAndUnsubscribe();
				}
			}
		}

		private event EventHandler<SdmObjectEventArgs<Link>> Created;
		public event EventHandler<SdmObjectEventArgs<Link>> OnUpdated
		{
			add
			{
				lock (_lock)
				{
					CheckAndSubscribe();
					this.Updated += value;
				}
			}

			remove
			{
				lock (_lock)
				{
					this.Updated -= value;
					CheckAndUnsubscribe();
				}
			}
		}

		private event EventHandler<SdmObjectEventArgs<Link>> Updated;
		public event EventHandler<SdmObjectEventArgs<Link>> OnDeleted
		{
			add
			{
				lock (_lock)
				{
					CheckAndSubscribe();
					this.Deleted += value;
				}
			}

			remove
			{
				lock (_lock)
				{
					this.Deleted -= value;
					CheckAndUnsubscribe();
				}
			}
		}

		private event EventHandler<SdmObjectEventArgs<Link>> Deleted;
		public void Create(Link createObject)
		{
			if (createObject is null)
			{
				throw new ArgumentNullException(nameof(createObject));
			}

			var instance = ToInstance(createObject);
			helper.DomInstances.Create(instance);
		}

		public IEnumerable<Link> Read(FilterElement<Link> filter)
		{
			if (filter is null)
			{
				throw new ArgumentNullException(nameof(filter));
			}

			var domFilter = TranslateFullFilter(filter);
			return Read(domFilter);
		}

		public IEnumerable<Link> Read(IQuery<Link> query)
		{
			if (query is null)
			{
				throw new ArgumentNullException(nameof(query));
			}

			var domFilter = TranslateFullFilter(query.Filter);
			var domOrder = TranslateFullOrderBy(query.Order);
			var domQuery = query.WithFilter(domFilter).WithOrder(domOrder);
			return Read(domQuery);
		}

		public void Update(Link updateObject)
		{
			if (updateObject is null)
			{
				throw new ArgumentNullException(nameof(updateObject));
			}

			var instance = ToInstance(updateObject);
			helper.DomInstances.Update(instance);
		}

		public void Delete(Link deleteObject)
		{
			if (deleteObject is null)
			{
				throw new ArgumentNullException(nameof(deleteObject));
			}

			var instance = ToInstance(deleteObject);
			helper.DomInstances.Delete(instance);
		}

		public void Create(IEnumerable<Link> createObjects)
		{
			if (createObjects is null || !createObjects.Any())
			{
				return;
			}

			var existing = new HashSet<Guid>();
			foreach (var batch in createObjects.Batch(500))
			{
				existing.UnionWith(Read(new ORFilterElement<Link>(batch.Select(obj => LinkExposers.Guid.Equal(obj.Guid)).ToArray())).Select(obj => obj.Guid));
			}

			var failures = new Dictionary<Guid, Exception>();
			var objects = createObjects.Where(obj => !existing.Contains(obj.Guid)).ToDictionary(obj => obj.Guid);
			foreach (var batch in createObjects.Select(ToInstance).Batch(helper.DomInstances.MaxAmountBulkOperation))
			{
				helper.DomInstances.TryCreateOrUpdate(batch.ToList(), out var result);
				foreach (var failure in result.UnsuccessfulIds)
				{
					failures.Add(failure.Id, new CrudFailedException(result.TraceDataPerItem[failure]));
				}
			}

			var exceptionBuilder = new SdmBulkCrudException<Link>.Builder();
			foreach (var obj in createObjects)
			{
				if (existing.Contains(obj.Guid))
				{
					exceptionBuilder.AddFailed(obj, new SdmCrudException<Link>(obj, $"Could not create Link with guid: '{obj.Guid}', it already exists."));
					continue;
				}

				if (failures.ContainsKey(obj.Guid))
				{
					exceptionBuilder.AddFailed(obj, failures[obj.Guid]);
					continue;
				}

				exceptionBuilder.AddSuccessful(obj);
			}

			if (exceptionBuilder.HasFailure)
			{
				throw exceptionBuilder.Build();
			}
		}

		public void CreateOrUpdate(IEnumerable<Link> items)
		{
			if (items is null || !items.Any())
			{
				return;
			}

			var exceptionBuilder = new SdmBulkCrudException<Link>.Builder();
			var objects = items.ToDictionary(obj => obj.Guid);
			foreach (var batch in items.Select(ToInstance).Batch(helper.DomInstances.MaxAmountBulkOperation))
			{
				helper.DomInstances.TryCreateOrUpdate(batch.ToList(), out var result);
				foreach (var failure in result.UnsuccessfulIds)
				{
					exceptionBuilder.AddFailed(objects[failure.Id], new CrudFailedException(result.TraceDataPerItem[failure]));
				}

				foreach (var success in result.SuccessfulIds)
				{
					exceptionBuilder.AddSuccessful(objects[success.Id]);
				}
			}

			if (exceptionBuilder.HasFailure)
			{
				throw exceptionBuilder.Build();
			}
		}

		public void Update(IEnumerable<Link> updateObjects)
		{
			if (updateObjects is null || !updateObjects.Any())
			{
				return;
			}

			var existing = new HashSet<Guid>();
			foreach (var batch in updateObjects.Batch(500))
			{
				existing.UnionWith(Read(new ORFilterElement<Link>(batch.Select(obj => LinkExposers.Guid.Equal(obj.Guid)).ToArray())).Select(obj => obj.Guid));
			}

			var failures = new Dictionary<Guid, Exception>();
			var objects = updateObjects.Where(obj => existing.Contains(obj.Guid)).ToDictionary(obj => obj.Guid);
			foreach (var batch in updateObjects.Select(ToInstance).Batch(helper.DomInstances.MaxAmountBulkOperation))
			{
				helper.DomInstances.TryCreateOrUpdate(batch.ToList(), out var result);
				foreach (var failure in result.UnsuccessfulIds)
				{
					failures.Add(failure.Id, new CrudFailedException(result.TraceDataPerItem[failure]));
				}
			}

			var exceptionBuilder = new SdmBulkCrudException<Link>.Builder();
			foreach (var obj in updateObjects)
			{
				if (!existing.Contains(obj.Guid))
				{
					exceptionBuilder.AddFailed(obj, new SdmCrudException<Link>(obj, "Could not update a non existing Link"));
					continue;
				}

				if (failures.ContainsKey(obj.Guid))
				{
					exceptionBuilder.AddFailed(obj, failures[obj.Guid]);
					continue;
				}

				exceptionBuilder.AddSuccessful(obj);
			}

			if (exceptionBuilder.HasFailure)
			{
				throw exceptionBuilder.Build();
			}
		}

		public void Delete(IEnumerable<Link> deleteObjects)
		{
			if (deleteObjects is null || !deleteObjects.Any())
			{
				return;
			}

			var exceptionBuilder = new SdmBulkCrudException<Link>.Builder();
			var objects = deleteObjects.ToDictionary(obj => obj.Guid);
			foreach (var batch in deleteObjects.Select(ToInstance).Batch(helper.DomInstances.MaxAmountBulkOperation))
			{
				helper.DomInstances.TryDelete(batch.ToList(), out var result);
				foreach (var failure in result.UnsuccessfulIds)
				{
					exceptionBuilder.AddFailed(objects[failure.Id], new CrudFailedException(result.TraceDataPerItem[failure]));
				}

				foreach (var success in result.SuccessfulIds)
				{
					exceptionBuilder.AddSuccessful(objects[success.Id]);
				}
			}

			if (exceptionBuilder.HasFailure)
			{
				throw exceptionBuilder.Build();
			}
		}

		public IEnumerable<IPagedResult<Link>> ReadPaged(FilterElement<Link> filter)
		{
			return ReadPaged(filter, 500);
		}

		public IEnumerable<IPagedResult<Link>> ReadPaged(FilterElement<Link> filter, int pageSize)
		{
			if (filter is null)
			{
				throw new ArgumentNullException(nameof(filter));
			}

			if (pageSize <= 0)
			{
				throw new ArgumentOutOfRangeException(nameof(pageSize), "The page size must be 1 or higher");
			}

			var domFilter = TranslateFullFilter(filter);
			var paging = ReadPaged(domFilter, pageSize).GetEnumerator();
			var moveNext = paging.MoveNext();
			var i = 0;
			while (moveNext)
			{
				var page = paging.Current.ToList();
				moveNext = paging.MoveNext();
				var result = new PagedResult<Link>(page, i, pageSize, moveNext);
				yield return result;
				i++;
			}
		}

		public IEnumerable<IPagedResult<Link>> ReadPaged(IQuery<Link> query)
		{
			return ReadPaged(query, 500);
		}

		public IEnumerable<IPagedResult<Link>> ReadPaged(IQuery<Link> query, int pageSize)
		{
			if (query is null)
			{
				throw new ArgumentNullException(nameof(query));
			}

			if (pageSize <= 0)
			{
				throw new ArgumentOutOfRangeException(nameof(pageSize), "The page size must be 1 or higher");
			}

			var domFilter = TranslateFullFilter(query.Filter);
			var domOrder = TranslateFullOrderBy(query.Order);
			var domQuery = query.WithFilter(domFilter).WithOrder(domOrder);
			var paging = ReadPaged(domQuery, pageSize).GetEnumerator();
			var moveNext = paging.MoveNext();
			var i = 0;
			while (moveNext)
			{
				var page = paging.Current.ToList();
				moveNext = paging.MoveNext();
				var result = new PagedResult<Link>(page, i, pageSize, moveNext);
				yield return result;
				i++;
			}
		}

		public long Count(FilterElement<Link> filter)
		{
			if (filter is null)
			{
				throw new ArgumentNullException(nameof(filter));
			}

			var domFilter = TranslateFullFilter(filter);
			domFilter = domFilter.AND(DomInstanceExposers.DomDefinitionId.Equal(SlcObject_LinkingIds.Definitions.Link.Id));
			return helper.DomInstances.Count(domFilter);
		}

		public long Count(IQuery<Link> query)
		{
			if (query is null)
			{
				throw new ArgumentNullException(nameof(query));
			}

			var domFilter = TranslateFullFilter(query.Filter);
			domFilter = domFilter.AND(DomInstanceExposers.DomDefinitionId.Equal(SlcObject_LinkingIds.Definitions.Link.Id));
			var domOrder = TranslateFullOrderBy(query.Order);
			var domQuery = query.WithFilter(domFilter).WithOrder(domOrder);
			return helper.DomInstances.Count(domQuery);
		}

		public void Dispose()
		{
			connection.RemoveSubscription(_subscriptionSetId, _subscriptionFilters);
			connection.OnNewMessage -= Connection_OnNewMessageMethod;
		}

		private void CheckAndSubscribe()
		{
			if (_subscriberCount <= 0)
			{
				this.connection.OnNewMessage += Connection_OnNewMessageMethod;
				this.connection.AddSubscription(_subscriptionSetId, _subscriptionFilters);
				this.connection.Subscribe();
			}

			_subscriberCount++;
		}

		private void CheckAndUnsubscribe()
		{
			_subscriberCount--;
			if (_subscriberCount <= 0)
			{
				this.connection.OnNewMessage -= Connection_OnNewMessageMethod;
				this.connection.RemoveSubscription(_subscriptionSetId, _subscriptionFilters);
			}
		}

		private void Connection_OnNewMessageMethod(object sender, NewMessageEventArgs e)
		{
			if (!e.FromSet(this._subscriptionSetId))
			{
				return;
			}

			if (!(e.Message is DomInstancesChangedEventMessage domInstancesChangedEventMessage))
			{
				return;
			}

			bool isCorrectType(DomInstance domInstance)
			{
				return domInstance.DomDefinitionId.Equals(SlcObject_LinkingIds.Definitions.Link);
			}

			foreach (var domInstance in domInstancesChangedEventMessage.Created.Where(isCorrectType))
			{
				Created?.Invoke(this, new SdmObjectEventArgs<Link>(FromInstance(domInstance)));
			}

			foreach (var domInstance in domInstancesChangedEventMessage.Updated.Where(isCorrectType))
			{
				Updated?.Invoke(this, new SdmObjectEventArgs<Link>(FromInstance(domInstance)));
			}

			foreach (var domInstance in domInstancesChangedEventMessage.Deleted.Where(isCorrectType))
			{
				Deleted?.Invoke(this, new SdmObjectEventArgs<Link>(FromInstance(domInstance)));
			}
		}

		private IEnumerable<Link> Read(FilterElement<DomInstance> domFilter)
		{
			if (domFilter is null)
			{
				throw new ArgumentNullException(nameof(domFilter));
			}

			domFilter = domFilter.AND(DomInstanceExposers.DomDefinitionId.Equal(SlcObject_LinkingIds.Definitions.Link.Id));
			var domInstances = helper.DomInstances.Read(domFilter);
			return domInstances.Select(FromInstance);
		}

		private IEnumerable<Link> Read(IQuery<DomInstance> domQuery)
		{
			if (domQuery is null)
			{
				throw new ArgumentNullException(nameof(domQuery));
			}

			var domFilter = domQuery.Filter.AND(DomInstanceExposers.DomDefinitionId.Equal(SlcObject_LinkingIds.Definitions.Link.Id));
			domQuery = domQuery.WithFilter(domFilter);
			var domInstances = helper.DomInstances.Read(domQuery);
			return domInstances.Select(FromInstance);
		}

		private IEnumerable<IEnumerable<Link>> ReadPaged(FilterElement<DomInstance> domFilter, int pageSize)
		{
			if (domFilter is null)
			{
				throw new ArgumentNullException(nameof(domFilter));
			}

			domFilter = domFilter.AND(DomInstanceExposers.DomDefinitionId.Equal(SlcObject_LinkingIds.Definitions.Link.Id));
			var pagingHelper = helper.DomInstances.PreparePaging(domFilter, pageSize);
			while (pagingHelper.MoveToNextPage())
			{
				yield return pagingHelper.GetCurrentPage().Select(FromInstance);
			}
		}

		private IEnumerable<IEnumerable<Link>> ReadPaged(IQuery<DomInstance> domQuery, int pageSize)
		{
			if (domQuery is null)
			{
				throw new ArgumentNullException(nameof(domQuery));
			}

			var domFilter = domQuery.Filter.AND(DomInstanceExposers.DomDefinitionId.Equal(SlcObject_LinkingIds.Definitions.Link.Id));
			domQuery = domQuery.WithFilter(domFilter);
			var pagingHelper = helper.DomInstances.PreparePaging(domQuery, pageSize);
			while (pagingHelper.MoveToNextPage())
			{
				yield return pagingHelper.GetCurrentPage().Select(FromInstance);
			}
		}

		private Link FromInstance(DomInstance instance)
		{
			return new Link(instance);
		}

		private DomInstance ToInstance(Link obj)
		{
			return obj.ToInstance();
		}

		private FilterElement<DomInstance> CreateFilter(string fieldName, Comparer comparer, object value)
		{
			switch (fieldName)
			{
				case "Entity.ID":
					return FilterElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.ID), comparer, (string)value);
				case "Entity.DisplayName":
					return FilterElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.DisplayName), comparer, (string)value);
				case "Entity.ModelName":
					return FilterElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.ModelName), comparer, (string)value);
				case "Entity.SolutionName":
					return FilterElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.SolutionName), comparer, (string)value);
				case "Entity.ParentID":
					return FilterElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.ParentID), comparer, (string)value);
				case "Entity.ParentModelName":
					return FilterElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.ParentModelName), comparer, (string)value);
				case "Entity.Temp":
					return FilterElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.Temp), comparer, (int)value);
				case nameof(Link.Guid):
					return FilterElementFactory.Create(DomInstanceExposers.Id, comparer, (Guid)value);
				case nameof(Link.LastModified):
					return FilterElementFactory.Create(DomInstanceExposers.LastModified, comparer, (DateTime)value);
				case nameof(Link.LastModifiedBy):
					return FilterElementFactory.Create(DomInstanceExposers.LastModifiedBy, comparer, (string)value);
				case nameof(Link.CreatedAt):
					return FilterElementFactory.Create(DomInstanceExposers.CreatedAt, comparer, (DateTime)value);
				case nameof(Link.CreatedBy):
					return FilterElementFactory.Create(DomInstanceExposers.CreatedBy, comparer, (string)value);
				default:
					throw new NotImplementedException();
			}
		}

		private IOrderByElement CreateOrderBy(string fieldName, SortOrder sortOrder, bool naturalSort = false)
		{
			switch (fieldName)
			{
				case "Entity.ID":
					return OrderByElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.ID), sortOrder, naturalSort);
				case "Entity.DisplayName":
					return OrderByElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.DisplayName), sortOrder, naturalSort);
				case "Entity.ModelName":
					return OrderByElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.ModelName), sortOrder, naturalSort);
				case "Entity.SolutionName":
					return OrderByElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.SolutionName), sortOrder, naturalSort);
				case "Entity.ParentID":
					return OrderByElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.ParentID), sortOrder, naturalSort);
				case "Entity.ParentModelName":
					return OrderByElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.ParentModelName), sortOrder, naturalSort);
				case "Entity.Temp":
					return OrderByElementFactory.Create(DomInstanceExposers.FieldValues.DomInstanceField(SlcObject_LinkingIds.Sections.Entity.Temp), sortOrder, naturalSort);
				case nameof(Link.Guid):
					return OrderByElementFactory.Create(DomInstanceExposers.Id, sortOrder, naturalSort);
				case nameof(Link.LastModified):
					return OrderByElementFactory.Create(DomInstanceExposers.LastModified, sortOrder, naturalSort);
				case nameof(Link.LastModifiedBy):
					return OrderByElementFactory.Create(DomInstanceExposers.LastModifiedBy, sortOrder, naturalSort);
				case nameof(Link.CreatedAt):
					return OrderByElementFactory.Create(DomInstanceExposers.CreatedAt, sortOrder, naturalSort);
				case nameof(Link.CreatedBy):
					return OrderByElementFactory.Create(DomInstanceExposers.CreatedBy, sortOrder, naturalSort);
				default:
					throw new NotImplementedException();
			}
		}

		private FilterElement<DomInstance> TranslateFullFilter(FilterElement<Link> filter)
		{
			if (filter is null)
			{
				throw new ArgumentNullException(nameof(filter));
			}

			FilterElement<DomInstance> translated;
			if (filter is ANDFilterElement<Link> and)
			{
				translated = new ANDFilterElement<DomInstance>(and.subFilters.Select(TranslateFullFilter).ToArray());
			}
			else if (filter is ORFilterElement<Link> or)
			{
				translated = new ORFilterElement<DomInstance>(or.subFilters.Select(TranslateFullFilter).ToArray());
			}
			else if (filter is NOTFilterElement<Link> not)
			{
				translated = new NOTFilterElement<DomInstance>(TranslateFullFilter(not));
			}
			else if (filter is TRUEFilterElement<Link>)
			{
				translated = new TRUEFilterElement<DomInstance>();
			}
			else if (filter is FALSEFilterElement<Link>)
			{
				translated = new FALSEFilterElement<DomInstance>();
			}
			else if (filter is ManagedFilterIdentifier managedFilter)
			{
				translated = TranslateFilter(managedFilter);
			}
			else
			{
				throw new NotSupportedException($"Unsupported filter: {filter}");
			}

			return translated;
		}

		private IOrderBy TranslateFullOrderBy(IOrderBy order)
		{
			if (order is null)
			{
				throw new ArgumentNullException(nameof(order));
			}

			var translatedElements = new List<IOrderByElement>();
			foreach (var orderByElement in order.Elements)
			{
				var translated = TranslateOrderBy(orderByElement);
				translatedElements.Add(translated);
			}

			return new OrderBy(translatedElements);
		}

		private FilterElement<DomInstance> TranslateFilter(ManagedFilterIdentifier managedFilter)
		{
			if (managedFilter is null)
			{
				throw new ArgumentNullException(nameof(managedFilter));
			}

			var fieldName = managedFilter.getFieldName().fieldName;
			var comparer = managedFilter.getComparer();
			var value = managedFilter.getValue();
			var translated = CreateFilter(fieldName, comparer, value);
			return translated;
		}

		private IOrderByElement TranslateOrderBy(IOrderByElement orderByElement)
		{
			if (orderByElement is null)
			{
				throw new ArgumentNullException(nameof(orderByElement));
			}

			var fieldName = orderByElement.Exposer.fieldName;
			var sortOrder = orderByElement.SortOrder;
			var naturalSort = orderByElement.Options.NaturalSort;
			var translated = CreateOrderBy(fieldName, sortOrder, naturalSort);
			return translated;
		}
	}
}
